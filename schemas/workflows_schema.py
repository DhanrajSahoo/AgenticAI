from typing import List, Optional, Dict, Any, Literal
from pydantic import BaseModel, Field, validator, UUID4
from datetime import datetime
import uuid

# Agent
class NodeDataAgent(BaseModel):
    name: str = Field(default="New Agent")
    role: str = Field(min_length=1)
    goal: str = Field(min_length=1)
    backstory: str = Field(min_length=1)
    verbose: bool = False
    allow_delegation: bool = True

class NodeDataTool(BaseModel):
    tool_id: str = Field(min_length=1)
    config_params: Optional[Dict[str, Any]] = None

class NodeDataTask(BaseModel):
    name: str = Field(default="New Task")
    description: str = Field(min_length=1)
    expected_output: str = Field(min_length=1)

# Workflow Structure
class WorkflowNode(BaseModel):
    id: str
    type: Literal["agent", "tool", "task"]
    position: Dict[str, float]
    data: Dict[str, Any]

    @validator('data', pre=True, always=True)
    def validate_node_data_type(cls, v, values):
        node_type = values.get('type')
        if node_type == 'agent':
            return v
        elif node_type == 'tool':
            return v
        elif node_type == 'task':
            return v
        raise ValueError(f"Unknown node type: {node_type} for data validation")


class WorkflowEdge(BaseModel):
    id: str
    source: str
    target: str
    sourceHandle: Optional[str] = None
    targetHandle: Optional[str] = None

# Workflow API Models
class WorkflowBase(BaseModel):
    name: str
    nodes: List[WorkflowNode]
    edges: List[WorkflowEdge]

class WorkflowCreate(WorkflowBase):
    # ID is generated by DB
    pass

class WorkflowUpdate(BaseModel):
    name: Optional[str] = None
    nodes: Optional[List[WorkflowNode]] = None
    edges: Optional[List[WorkflowEdge]] = None

class WorkflowInDB(WorkflowBase):
    id: UUID4
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

# Workflow Execution
class WorkflowExecutionResult(BaseModel):
    workflow_id: UUID4
    status: str
    output: Optional[Any] = None
    error: Optional[str] = None